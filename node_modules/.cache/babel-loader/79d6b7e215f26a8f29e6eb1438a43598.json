{"ast":null,"code":"var _jsxFileName = \"/home/laurent/react/pendu/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Quotation from './Quotation';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.quotations = [\"Rien ne sert de courir, il faut partir à point\", \"La raison du plus fort est toujours la meilleure\", \"La douleur est toujours moins forte que la plainte\", \"En toute chose, il faut considérer la fin\", \"On hasarde de perdre en voulant trop gagner\"];\n    this.state = {\n      letters: ['A', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    };\n  } // Produit une représentation textuelle de l’état de la partie,\n  // chaque lettre non découverte étant représentée par un _underscore_.\n  // (CSS assurera de l’espacement entre les lettres pour mieux\n  // visualiser le tout).\n\n\n  computeDisplay(phrase, usedLetters) {\n    return phrase.replace(/\\w/g, letter => usedLetters.includes(letter) ? letter : '_');\n  }\n\n  setBackgroundColor(index) {\n    return this.state.letters[index] === this.state.letters[index].toUpperCase() ? \"rgb(185, 185, 185)\" : \"rgb(240, 240, 240)\";\n  }\n\n  tryLetter(index) {\n    if (this.state.letters[index] === this.state.letters[index].toLowerCase()) {\n      let newLetters = this.state.letters;\n      newLetters[index] = newLetters[index].toUpperCase();\n      this.setState({\n        letters: newLetters\n      });\n    } // console.log(\"click\", index);\n\n  }\n\n  showRowButtons(row) {\n    return React.createElement(\"div\", {\n      style: {\n        \"display\": \"flex\",\n        \"justifyContent\": \"center\",\n        \"alignItems\": \"center\",\n        \"backgroundColor\": \"#222\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, this.state.letters.map((letter, index) => {\n      return row === 1 ? index < 13 ? React.createElement(\"button\", {\n        key: index,\n        style: {\n          \"width\": 25,\n          \"backgroundColor\": this.setBackgroundColor(index)\n        },\n        onClick: () => this.tryLetter(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, letter.toUpperCase()) : '' : index >= 13 ? React.createElement(\"button\", {\n        key: index,\n        style: {\n          \"width\": 25,\n          \"backgroundColor\": this.setBackgroundColor(index)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, letter.toUpperCase()) : '';\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Quotation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })), this.showRowButtons(1), this.showRowButtons(2)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/laurent/react/pendu/src/App.js"],"names":["React","Quotation","App","Component","constructor","props","quotations","state","letters","computeDisplay","phrase","usedLetters","replace","letter","includes","setBackgroundColor","index","toUpperCase","tryLetter","toLowerCase","newLetters","setState","showRowButtons","row","map","render","logo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Quotation from './Quotation';\n\nclass App extends React.Component {\n  quotations = [\n    \"Rien ne sert de courir, il faut partir à point\",\n    \"La raison du plus fort est toujours la meilleure\",\n    \"La douleur est toujours moins forte que la plainte\",\n    \"En toute chose, il faut considérer la fin\",\n    \"On hasarde de perdre en voulant trop gagner\"\n  ];\n\n\n    constructor(props){\n    super(props);\n    \n    this.state = { \n      letters: ['A', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n              'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n\n    };\n\n  }\n\n\n  // Produit une représentation textuelle de l’état de la partie,\n// chaque lettre non découverte étant représentée par un _underscore_.\n// (CSS assurera de l’espacement entre les lettres pour mieux\n// visualiser le tout).\ncomputeDisplay(phrase, usedLetters) {\n  return phrase.replace(/\\w/g,\n    (letter) => (usedLetters.includes(letter) ? letter : '_')\n  )\n}\n\nsetBackgroundColor(index){\n  return this.state.letters[index] === this.state.letters[index].toUpperCase() ? \"rgb(185, 185, 185)\" : \"rgb(240, 240, 240)\"\n}\n\ntryLetter(index){\n  if(this.state.letters[index] === this.state.letters[index].toLowerCase() ){\n    let newLetters = this.state.letters;\n    newLetters[index] = newLetters[index].toUpperCase();\n    this.setState({\n      letters:  newLetters,\n    });\n  }\n // console.log(\"click\", index);\n}\n\nshowRowButtons(row){\n  return <div style={{\n    \"display\": \"flex\",\n    \"justifyContent\": \"center\",\n    \"alignItems\": \"center\",\n    \"backgroundColor\": \"#222\"\n    }}>\n      \n      {this.state.letters.map((letter, index) => {\n        return row === 1 ?  \n        (index < 13 ? <button key={index} style={{\"width\": 25, \"backgroundColor\": this.setBackgroundColor(index)}} onClick={() => this.tryLetter(index)}>{letter.toUpperCase()}</button> : '')\n        : (index >= 13 ? <button key={index} style={{\"width\": 25, \"backgroundColor\": this.setBackgroundColor(index)}}>{letter.toUpperCase()}</button> : '')\n      })\n    }\n  </div>\n}\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            <Quotation />\n          \n          </p>\n         {this.showRowButtons(1)} \n         {this.showRowButtons(2)} \n            \n          \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}