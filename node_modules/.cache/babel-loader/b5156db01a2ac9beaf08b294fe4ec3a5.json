{"ast":null,"code":"var _jsxFileName = \"/home/laurent/react/pendu/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport rabbit from './images/pendu.gif';\nimport Game from './Game';\nimport Quotation from './Quotation';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.quotations = [\"Ri\", \"La raison du plus fort est toujours la meilleure\", \"La douleur est toujours moins forte que la plainte\", \"En toute chose, il faut considérer la fin\", \"On hasarde de perdre en voulant trop gagner\"];\n    this.state = {\n      letters: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n      usedLetters: [],\n      numQuotation: 0,\n      guesses: 0\n    };\n    this.showRowButtons = this.showRowButtons.bind(this);\n    this.newGame = this.newGame.bind(this);\n  } // Produit une représentation textuelle de l’état de la partie,\n  // chaque lettre non découverte étant représentée par un _underscore_.\n  // (CSS assurera de l’espacement entre les lettres pour mieux\n  // visualiser le tout).\n\n\n  computeDisplay(phrase, usedLetters) {\n    return phrase.replace(/\\w/g, letter => usedLetters.includes(letter) ? letter : '_');\n  }\n\n  showRowButtons(row) {\n    return React.createElement(\"div\", {\n      style: {\n        \"display\": \"flex\",\n        \"justifyContent\": \"center\",\n        \"alignItems\": \"center\",\n        \"backgroundColor\": \"#222\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, this.state.letters.map((letter, index) => {\n      return row === 1 ? index < 13 ? React.createElement(\"button\", {\n        key: index,\n        style: {\n          \"width\": 25,\n          \"backgroundColor\": this.setBackgroundColor(index)\n        },\n        onClick: () => this.tryLetter(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, letter.toUpperCase()) : '' : index >= 13 ? React.createElement(\"button\", {\n        key: index,\n        style: {\n          \"width\": 25,\n          \"backgroundColor\": this.setBackgroundColor(index)\n        },\n        onClick: () => this.tryLetter(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, letter.toUpperCase()) : '';\n    }));\n  }\n\n  setBackgroundColor(index) {\n    return this.state.usedLetters.includes(this.state.letters[index]) ? \"rgb(185, 185, 185)\" : \"rgb(240, 240, 240)\";\n  }\n\n  tryLetter(index) {\n    let usedLetters = this.state.usedLetters;\n    let guesses = this.state.guesses + 1;\n\n    if (!this.state.usedLetters.includes(this.state.letters[index])) {\n      usedLetters.push(this.state.letters[index]);\n    }\n\n    this.setState({\n      usedLetters: usedLetters,\n      guesses: guesses\n    });\n  }\n\n  checkWon(response) {\n    return !response.includes('_');\n  }\n\n  newGame() {\n    const numQuotation = parseInt(this.state.numQuotation + 1, 10) % this.quotations.length;\n    this.setState({\n      usedLetters: [],\n      numQuotation: numQuotation,\n      guesses: 0\n    });\n  }\n\n  render() {\n    const won = this.checkWon(this.computeDisplay(this.quotations[this.state.numQuotation].toLowerCase(), this.state.usedLetters.join().toLowerCase()));\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: rabbit,\n      className: \"App-logo\",\n      alt: \"jeu du pendu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(Quotation, {\n      visuPhrase: this.computeDisplay(this.quotations[this.state.numQuotation].toLowerCase(), this.state.usedLetters.join().toLowerCase()),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(Game, {\n      showRowButtons: this.showRowButtons,\n      won: won,\n      newGame: this.newGame,\n      guesses: this.state.guesses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/laurent/react/pendu/src/App.js"],"names":["React","rabbit","Game","Quotation","App","Component","constructor","props","quotations","state","letters","usedLetters","numQuotation","guesses","showRowButtons","bind","newGame","computeDisplay","phrase","replace","letter","includes","row","map","index","setBackgroundColor","tryLetter","toUpperCase","push","setState","checkWon","response","parseInt","length","render","won","toLowerCase","join"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport rabbit from './images/pendu.gif';\nimport Game from './Game';\nimport Quotation from './Quotation';\n\nclass App extends React.Component {\n  quotations = [\n    \"Ri\",\n    \"La raison du plus fort est toujours la meilleure\",\n    \"La douleur est toujours moins forte que la plainte\",\n    \"En toute chose, il faut considérer la fin\",\n    \"On hasarde de perdre en voulant trop gagner\"\n  ];\n\n\n    constructor(props){\n    super(props);\n    \n    this.state = { \n      letters: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n              'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n      usedLetters: [],\n      numQuotation: 0,\n      guesses: 0,\n    };\n    \n    this.showRowButtons = this.showRowButtons.bind(this);\n    this.newGame = this.newGame.bind(this);\n\n  }\n\n\n  // Produit une représentation textuelle de l’état de la partie,\n// chaque lettre non découverte étant représentée par un _underscore_.\n// (CSS assurera de l’espacement entre les lettres pour mieux\n// visualiser le tout).\ncomputeDisplay(phrase, usedLetters) {\n  return phrase.replace(/\\w/g,\n    (letter) => (usedLetters.includes(letter) ? letter : '_')\n  )\n}\n\nshowRowButtons(row){\n\n  return <div style={{\n      \"display\": \"flex\",\n      \"justifyContent\": \"center\",\n      \"alignItems\": \"center\",\n      \"backgroundColor\": \"#222\"\n      }}>\n      \n      {this.state.letters.map((letter, index) => {\n          return row === 1 ?  \n          (index < 13 ? <button key={index} style={{\"width\": 25, \"backgroundColor\": this.setBackgroundColor(index)}} onClick={() => this.tryLetter(index)}>{letter.toUpperCase()}</button> : '')\n          : (index >= 13 ? <button key={index} style={{\"width\": 25, \"backgroundColor\": this.setBackgroundColor(index)}} onClick={() => this.tryLetter(index)}>{letter.toUpperCase()}</button> : '')\n      })\n      }\n  </div>\n  }\n\n\nsetBackgroundColor(index){\n  return this.state.usedLetters.includes(this.state.letters[index])? \"rgb(185, 185, 185)\" : \"rgb(240, 240, 240)\"\n}\n\ntryLetter(index){\n  let usedLetters = this.state.usedLetters;\n  let guesses = this.state.guesses + 1;\n  if(!this.state.usedLetters.includes(this.state.letters[index])){\n    usedLetters.push(this.state.letters[index])\n  }\n  this.setState({\n    usedLetters:  usedLetters,\n    guesses: guesses,\n  });\n}\n\ncheckWon(response){\n  return !response.includes('_');\n}\n\nnewGame(){\n  const numQuotation = parseInt((this.state.numQuotation + 1), 10) % this.quotations.length;\n  this.setState({\n    usedLetters: [],\n    numQuotation: numQuotation,\n    guesses: 0,\n  })\n}\n\n  render(){\n    const won = this.checkWon(this.computeDisplay(this.quotations[this.state.numQuotation].toLowerCase(), this.state.usedLetters.join().toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={rabbit} className=\"App-logo\" alt=\"jeu du pendu\" />\n          <Quotation visuPhrase={this.computeDisplay(this.quotations[this.state.numQuotation].toLowerCase(), this.state.usedLetters.join().toLowerCase())}/>\n          <Game showRowButtons = {this.showRowButtons} won = {won} newGame={this.newGame} guesses={this.state.guesses} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}